---
title: "STAT 331 Portfolio"
author: "Jared Hammett"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
code-tools: true
code-fold: true
toc: true
toc-title: "Contents"
toc-depth: 2
theme: slate
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 2: Question 1
library(here)
surveys <- read_csv(here::here("week_2", "labs", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 3: Question 2
library(here)
evals <- read_csv(here::here("week_3", "labs", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3: Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    across(c(teacher_id, course_id, academic_degree, sex), as.factor),
    seniority = as.integer(seniority)
  ) |>
  select(c(course_id,
           teacher_id,
           question_no,
           no_participants,
           resp_share,
           SET_score_avg,
           percent_failed_cur,
           academic_degree,
           seniority,
           sex
           ))

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
#Lab 3: Question 8 (Modified)
#Note: this is pretty gross and not a great way of selecting the proper columns but demonstrates negating columns and helps trim some of the fat from the output
teacher_evals_clean |>
  filter(if_any(.cols = everything(), .fns = ~ is.na(.x))) |>
  select(course_id, teacher_id, everything(), -c(sex, question_no, seniority, no_participants, academic_degree ))

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
#| label: uncovering-missing-values
# Lab 3: Question 8 (Modified)
teacher_evals_clean |>
  filter(if_any(.cols = everything(), .fns = ~ is.na(.x))) |>
  select(ends_with("id"), everything())

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 5
person |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  left_join(facebook_event_checkin, by = join_by(id == person_id)) |>
  mutate(date = ymd(date)) |>
  filter(height >= 65, height <= 67, hair_color == 'red',
         car_make == 'Tesla', car_model == 'Model S', event_name == "SQL Symphony Concert",
         year(date) == 2017, month(date) == '12') |>
  group_by(id, name) |>
  summarise(cnt = n(), .groups = 'drop' ) |>
  filter(cnt == 3) |>
  pull(name)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3: Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n_distinct(course_id),
    avg_q1    = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(n_courses >= 5) |>
  filter(avg_q1 %in% c(max(avg_q1), min(avg_q1))) |>
  arrange(desc(avg_q1))


```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 3: Question 12
teacher_evals_clean |>
  filter(academic_degree %in% c('dr', 'prof')) |>
  group_by(teacher_id) |>
  summarise(
    avg_response = mean(resp_share),
    seniority = first(seniority),
    sex = first(sex),
    .groups = "drop"
  ) |>
  filter(avg_response %in% c(max(avg_response), min(avg_response))) |>
  select(teacher_id, avg_response, seniority, sex) |>
  arrange(desc(avg_response))

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5 (Modified)
interview |>
  left_join(person, join_by(person_id == id)) |>
  filter(str_detect(name, "Annabel ") |
           ((address_street_name == "Northwestern Dr") &
              address_number == max(address_number)))

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
person |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  left_join(facebook_event_checkin, by = join_by(id == person_id)) |>
  mutate(date = ymd(date)) |>
  filter(height >= 65, height <= 67, hair_color == 'red',
         car_make == 'Tesla', car_model == 'Model S', event_name == "SQL Symphony Concert",
         year(date) == 2017, month(date) == '12') |>
  group_by(id, name) |>
  summarise(cnt = n(), .groups = 'drop' ) |>
  filter(cnt == 3) |>
  pull(name)

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 3: Question 1 (Modified)

teacher_evals_compare <- evals |>
  mutate(
    question_no = question_no - 900,
    SET_level = case_when(SET_score_avg >= 4 ~ "excellent",
                               SET_score_avg < 4 ~ "standard"),
        sen_level = case_when(seniority <= 4 ~ "junior",
                              seniority >= 5 & seniority <= 8 ~ "senior",
                              seniority > 8 ~ "very senior")) |>
  filter(question_no == 3) |>
  select(question_no, course_id, SET_level, sen_level)

teacher_evals_compare

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
# Lab 3: Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    across(c(teacher_id, course_id, academic_degree, sex), as.factor),
    seniority = as.integer(seniority)
  ) |>
  select(c(course_id,
           teacher_id,
           question_no,
           no_participants,
           resp_share,
           SET_score_avg,
           percent_failed_cur,
           academic_degree,
           seniority,
           sex
           ))
```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4: Question 7
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4: Question 7 (Modified)
# Note : this data is already releveled in the proper order but this is for demonstration
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool"),
  age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 4: Question 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         county_name = as_factor(county_name),
         census_region = fct_collapse(
           county_name,
           "Superior California" = superior_counties,
           "North Coast" = north_coast_counties,
           "San Francisco Bay Area" = san_fran_counties,
           "Northern San Joaquin Valley" = n_san_joaquin_counties,
           "Central Coast" = central_coast_counties,
           "Southern San Joaquin Valley" = s_san_joaquin_counties,
           "Inland Empire" = inland_counties,
           "Los Angeles County" = la_county,
           "Orange County" = orange_county,
           "San Diego - Imperial" = san_diego_imperial_counties )
         )
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5
person |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  left_join(facebook_event_checkin, by = join_by(id == person_id)) |>
  mutate(date = ymd(date)) |>
  filter(height >= 65, height <= 67, hair_color == 'red',
         car_make == 'Tesla', car_model == 'Model S', event_name == "SQL Symphony Concert",
         year(date) == 2017, month(date) == '12') |>
  group_by(id, name) |>
  summarise(cnt = n(), .groups = 'drop' ) |>
  filter(cnt == 3) |>
  pull(name)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#Lab 4: Question 2
ca_childcare <- left_join(x = childcare_costs,
                          y = counties,
                          by = join_by(county_fips_code)) |>
filter(state_name == "California")
ca_childcare
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Lab 5 (Modified)
person |>
  right_join(interview, join_by(id == person_id)) |>
  filter(str_detect(name, "Annabel ") |
           ((address_street_name == "Northwestern Dr") &
              address_number == max(address_number)))

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
# Lab 5
get_fit_now_check_in |>
  left_join(get_fit_now_member, join_by(membership_id == id)) |>
  left_join(person, join_by(person_id == id, name == name)) |>
  filter(grepl("Annabel", name))
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5 (Modified)
person |>
  inner_join(interview, join_by(id == person_id)) |>
  filter(str_detect(name, "Annabel ") |
           ((address_street_name == "Northwestern Dr") &
              address_number == max(address_number)))
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 5 (Modified)
get_fit_now_check_in |>
  inner_join(get_fit_now_member, join_by(membership_id == id)) |>
  inner_join(person, join_by(person_id == id, name == name)) |>
  filter(grepl("Annabel", name))

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4: Question 7
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4: Question 5
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarise(med_income_2018_dollars = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(
    names_from  = study_year,
    values_from = med_income_2018_dollars
  ) |>
  rename(region = census_region) |>
  arrange(desc(`2018`))

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 2: Question 
ggplot(data = surveys,
mapping = aes(y = species, x = weight)) +
    geom_jitter(color = "steelblue", alpha = 0.3) +
    geom_boxplot(outliers = FALSE) +
    labs(title = "What are the weight distributions between species?",
         y = "Species Type",
         x = "Weight (g)")
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 5
person |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  left_join(facebook_event_checkin, by = join_by(id == person_id)) |>
  mutate(date = ymd(date)) |>
  filter(height >= 65, height <= 67, hair_color == 'red',
         car_make == 'Tesla', car_model == 'Model S', event_name == "SQL Symphony Concert",
         year(date) == 2017, month(date) == '12') |>
  group_by(id, name) |>
  summarise(cnt = n(), .groups = 'drop' ) |>
  filter(cnt == 3) |>
  pull(name)
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4: Question 7
 ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool"),
  age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2: Question 16
ggplot(data = surveys,
mapping = aes(y = species, x = weight)) +
    geom_jitter(color = "steelblue", alpha = 0.3) +
    geom_boxplot(outliers = FALSE) +
    labs(title = "What are the weight distributions between species?",
         y = "Species Type",
         x = "Weight (g)")
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
# Lab 4: Question 7
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool"),
  age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
# Lab 4: Question 7
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool"),
  age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 4: Question 7
ca_childcare |>
  pivot_longer(
    c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "weekly_cost"
  ) |>
  mutate(age_group = recode(age_group,
                            mc_infant="Infant", mc_toddler="Toddler", mc_preschool="Preschool"),
  age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(study_year, weekly_cost, color = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = `loess`, formula = 'y ~ x') +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500))+
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    y = NULL,
    x = "Study Year",
    color = "California Region"
  ) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 6),
    legend.key.size = unit(3.0, "mm")
  )

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Lab 4: Question 7 (Modified)
library(viridis)

ca_childcare |>
  pivot_longer(c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group", values_to = "weekly_cost") |>
  mutate(
    age_group = recode(age_group,
      mc_infant = "Infant", mc_toddler = "Toddler", mc_preschool = "Preschool"
    ),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")
  ) |>
  ggplot(aes(study_year, weekly_cost,
             color = census_region, fill = census_region)) +
  geom_point(alpha = 0.5, size = 0.8) +
  geom_smooth(method = "loess", formula = y ~ x, se = TRUE) +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2), limits = c(2008, 2018)) +
  scale_y_continuous(breaks = seq(100, 500, 100), limits = c(100, 500)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       y = NULL, x = "Study Year", color = "California Region", fill = "California Region") +
  scale_color_viridis_d(option = "D") +
  scale_fill_viridis_d(option = "D") +
  theme_bw() +
  theme(aspect.ratio = 1, axis.text.x = element_text(size = 6),
        legend.key.size = unit(3.0, "mm"))


```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
